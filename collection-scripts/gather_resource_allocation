#!/bin/bash 

set -o pipefail

BASE_COLLECTION_PATH="must-gather"
RESOURCE_ALLOCATION_PATH=${BASE_COLLECTION_PATH}/resource_allocation

mkdir -p "${RESOURCE_ALLOCATION_PATH}"/

PIDS=()

# Collect all the resource limits, alocations and node subnets and store it in a json
oc get pods -A -o json | \
  jq -r '.items[] | select (.status.phase != "Succeeded" and .status.phase != "Failed") | ((.spec.nodeName // "(non-scheduled)") + " " + .metadata.namespace + "/" + .metadata.name + " " + (.spec.containers[] | (.resources.requests.cpu // "0") + " " + (.resources.requests.memory // "0") + " " + (.resources.limits.cpu // "0") + " " + (.resources.limits.memory // "0")))' | \
  awk '
    function tomillis(a) {
      match(a, /([0-9\.]+)(m?)/, m)
      if(m[2] == "m")
        a=m[1]
      else
        a=m[1]*1000
      return a
    }
    function num_convert(a,u) {
      cmd="numfmt --from=auto --to-unit="u" "a
      cmd | getline b
      close(cmd)
      return b
    }
    BEGIN {
      while ("oc get nodes -o json | jq -r \".items[] | (.metadata.name + \\\" \\\" + .status.allocatable.cpu + \\\" \\\" + .status.allocatable.memory + \\\" \\\" + .status.allocatable.pods)\"" | getline) {
        alloc[$1][1]=$2
        alloc[$1][2]=$3
        alloc[$1][3]=$4
      }
    }
    {
      pods[$1][$1$2] = 1
      nodes[$1]["cpur"] += tomillis($3)
      nodes[$1]["memr"] += num_convert($4,1)
      nodes[$1]["cpul"] += tomillis($5)
      nodes[$1]["meml"] += num_convert($6,1)
    }
    END {
      for (n in nodes) {
        if ( n == "(non-scheduled)" )
          printf "%s|-|%s|-|%s|-|-|%s|-|%s|-|-|%s\n",n ,nodes[n]["cpur"]"m" ,nodes[n]["cpul"]"m" ,num_convert(nodes[n]["memr"],"Mi")"Mi"\
            ,num_convert(nodes[n]["meml"],"Mi")"Mi" ,length(pods[n])
        else
          printf "%s|%s|%s|(%.0f%%)|%s|(%.0f%%)|%s|%s|(%.0f%%)|%s|(%.0f%%)|%s|%s\n",n ,alloc[n][1] ,nodes[n]["cpur"]"m"\
            ,nodes[n]["cpur"]*100/alloc[n][1] ,nodes[n]["cpul"]"m" ,nodes[n]["cpul"]*100/alloc[n][1] ,num_convert(alloc[n][2],"Mi")"Mi"\
            ,num_convert(nodes[n]["memr"],"Mi")"Mi" ,nodes[n]["memr"]*100/num_convert(alloc[n][2],1) ,num_convert(nodes[n]["meml"],"Mi")"Mi"\
            ,nodes[n]["meml"]*100/num_convert(alloc[n][2],1) ,alloc[n][3] ,length(pods[n])
      }
    }' | \
  column -s "|" -J -n "node_resources" -N "node,cpu_alloc,cpu_req,cpu_req_per,cpu_lim,cpu_lim_per,mem_alloc,mem_req,mem_req_per,mem_lim,mem_lim_per,pods_alloc,pods_count" | jq -c  > ${RESOURCE_ALLOCATION_PATH}/node_resources.json &
PIDS+=($!)

# Collect info from all containers, obfuscating custom namespaces, pods and container names
oc get pods -A -o json | \
  jq -r '(.items[] | . as $ROOT | $ROOT.status.containerStatuses // [] | .[] | . as $CONTAINER_STATUS | [$ROOT.spec.nodeName // "-", $ROOT.metadata.namespace, $ROOT.metadata.name, $ROOT.status.phase, $CONTAINER_STATUS.name, $CONTAINER_STATUS.ready, $CONTAINER_STATUS.state.running.startedAt // "-", $CONTAINER_STATUS.lastState.terminated.exitCode // "-" , $CONTAINER_STATUS.lastState.terminated.finishedAt // "-", $CONTAINER_STATUS.lastState.terminated.reason // "-", $CONTAINER_STATUS.state.terminated.exitCode // "-", $CONTAINER_STATUS.restartCount // "-", ($ROOT.spec.containers[] | select(.name==$CONTAINER_STATUS.name) | (.resources.requests.cpu|tostring), (.resources.requests.memory|tostring), (.resources.limits.cpu|tostring), (.resources.limits.memory|tostring))]) | @tsv' | \
  awk '
    function sha256(a) {
      cmd="echo "a" | sha256sum"
      cmd | getline b
      split(b, sha, " ")
      close(cmd)
      return sha[1]
    }
    {
      if ($2 ~ "openshift*|kube-*|default")
        print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16
      else
        print $1,sha256($2),sha256($3),$4,sha256($5),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16
    }' | \
  column -J -n "containers_data" --table-columns "node_name","namespace_name","pod_name","pod_phase","container_name","container_readiness","started_at","previous_exit_code","previous_finished_at","reason","exit_code","restarts","cpu_requests","mem_requests","cpu_limits","mem_limits" | jq -c > ${RESOURCE_ALLOCATION_PATH}/container_resources.json &
PIDS+=($!)

# Collect the output of "oc adm top nodes" in json format
oc get --raw /apis/metrics.k8s.io/v1beta1/nodes | jq -r '.items[] | .metadata.name + " " + .usage.cpu + " " + .usage.memory' | awk '
    function tomillis(a) {
      match(a, /([0-9\.]+)([mn]?)/, m)
      if(m[2] == "m")
        a=m[1]
      else if (m[2] == "n")
	a=m[1]/1000000
      else
        a=m[1]*1000
      return a
    }
    function num_convert(a,u) {
      cmd="numfmt --from=auto --to-unit="u" "a
      cmd | getline b
      close(cmd)
      return b
    }
    BEGIN {
      while ("oc get nodes -o json | jq -r \".items[] | (.metadata.name + \\\" \\\" + .status.allocatable.cpu + \\\" \\\" + .status.allocatable.memory)\"" | getline) {
        alloc[$1][1]=$2
        alloc[$1][2]=$3
      }
    }
    {
      node[$1]["cpu"]=tomillis($2)
      node[$1]["mem"]=num_convert($3,"Ki")
    }
    END {
      for (i in node){
        printf "%s|%.0fm|%.0f%%|%sMi|%.0f%%\n",i,node[i]["cpu"],node[i]["cpu"]*100/alloc[i][1],num_convert(node[i]["mem"]"Ki","Mi"),node[i]["mem"]*100/alloc[i][2]
      }
    }' | column -J -s "|" -n "top_nodes" -N "node,cpu,cpu_per,mem,mem_per" | jq -c > ${RESOURCE_ALLOCATION_PATH}/top_nodes.json &
PIDS+=($!)

echo "INFO: Waiting for resources info collection to complete ..."
wait "${PIDS[@]}"
echo "INFO: Done collecting resources information"

# force disk flush to ensure that all data gathered is accessible in the copy container
sync
